services:
  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:latest
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway (all AWS services)
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN}
      - SERVICES=sqs,rds,dynamodb,s3         # Enable SQS, RDS (Aurora), and other AWS services
      - DEBUG=${DEBUG:-1}                     # Enable debug mode for learning
      - PERSISTENCE=${PERSISTENCE:-0}         # Disable persistence for clean testing
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR:-local}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - EAGER_SERVICE_LOADING=1               # Load services immediately
      - SQS_ENDPOINT_STRATEGY=path            # Use path-based endpoints (more reliable on Windows/proxy)
      - RDS_PG_CUSTOM_VERSIONS=16.1           # PostgreSQL 16 for Aurora compatibility
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - localstack-network

  # One-shot init container to create SQS queues using aws-cli against LocalStack
  sqs-init:
    image: amazon/aws-cli:latest
    profiles: ["init"]
    container_name: sqs-init
    depends_on:
      localstack:
        condition: service_healthy
    environment:
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - LOCALSTACK_ENDPOINT=http://localstack:4566
    volumes:
      - ./SQS/sqs-init.sh:/init/sqs-init.sh
    entrypoint: ["/bin/sh", "-c"]
    # command: ["set -e; sed -i 's/\\r$//' /init/sqs-init.sh; /bin/sh /init/sqs-init.sh && echo 'SQS init done' || (echo 'SQS init failed' >&2; exit 1)"]
    command: ["set -e; cp /init/sqs-init.sh; sed -i 's/\\r$//'; /bin/sh && echo 'SQS init done' || (echo 'SQS init failed' >&2; exit 1)"]
    networks:
      - localstack-network
    restart: "no"

  # PostgreSQL for local Aurora simulation
  aurora-postgres:
    container_name: aurora-postgres-local
    image: postgres:16-alpine
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=localpassword
      - POSTGRES_DB=auroradb
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=en_US.utf8
    volumes:
      - aurora-postgres-data:/var/lib/postgresql/data
      - ./init-aurora.sql:/docker-entrypoint-initdb.d/init-aurora.sql  # Aurora initialization
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d auroradb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - localstack-network

networks:
  localstack-network:
    driver: bridge

volumes:
  aurora-postgres-data:
    driver: local